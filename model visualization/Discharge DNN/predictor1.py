# create predictor1 model
d = layers.Input(shape=(100, 8))
conv1 = layers.Conv1D(64, 11, padding='same', activation=tf.nn.relu)(d)
conv2 = layers.Conv1D(128, 7, padding='same', activation= tf.nn.relu)(conv1)
conv3 = layers.Conv1D(256, 5, padding='same', activation= tf.nn.relu)(conv2)
SpatialMaxPooling1D = layers.SpatialDropout1D(0.16)(conv3)
avgpooling1d = layers.AveragePooling1D(pool_size=2, strides=2)(SpatialMaxPooling1D)
conv4_1 = layers.Conv1D(64, 11, padding='same', activation= tf.nn.relu)(avgpooling1d)
conv4_2 = layers.Conv1D(64, 7, padding='same', activation= tf.nn.relu)(avgpooling1d)
print('conv4_1 shape',conv4_1.shape)
print('conv4_2 shape',conv4_2.shape)
dotted = layers.dot([conv4_1, conv4_2], axes=(2, 2))
print('dotted shape',dotted.shape)
activation = layers.Activation(tf.nn.sigmoid)(dotted)
print('actvation shape',activation.shape)
globalavgpooling1d1_1 = layers.GlobalAveragePooling1D()(activation)
globalavgpooling1d1_2 = layers.GlobalAveragePooling1D()(conv4_1)
print('globalavgpooling1d1 shape',globalavgpooling1d1_1.shape)
concat1 = layers.Concatenate(axis=1)([globalavgpooling1d1_1, globalavgpooling1d1_2])
print('concat1 shape',concat1.shape)
reshape = layers.Reshape((-1, 1))(concat1)
conv5_1 = layers.Conv1D(64, 9, padding='same', activation= tf.nn.relu)(reshape)
conv5_2 = layers.Conv1D(128, 7, padding='same', activation= tf.nn.relu)(reshape)
conv6_1 = layers.Conv1D(32, 7, padding='same', activation= tf.nn.relu)(conv5_1)
conv6_2 = layers.Conv1D(256, 11, padding='same', activation= tf.nn.relu)(conv5_2)
conv7_1 = layers.Conv1D(128, 7, padding='same', activation= tf.nn.relu)(conv6_1)
conv7_2 = layers.Conv1D(256, 3, padding='same', activation= tf.nn.relu)(conv6_2)
globalavgpooling1d2 = layers.GlobalAveragePooling1D()(conv7_1)
globalmaxpooling1d2 = layers.GlobalMaxPooling1D()(conv7_1)
globalavgpooling1d3 = layers.GlobalAveragePooling1D()(conv7_2)
globalmaxpooling1d3 = layers.GlobalMaxPooling1D()(conv7_2)
fc1_1 = layers.Dense(1)(layers.Add()([globalavgpooling1d2, globalmaxpooling1d2]))
fc1_2 = layers.Dense(1)(layers.Add()([globalavgpooling1d3, globalmaxpooling1d3]))
concat2 = layers.Concatenate(axis=1)([fc1_1, fc1_2])
model = Model(d,concat2)

# save model and visualize
path = './predictor1.h5'
tf.keras.models.save_model(model,path)
netron.start(path)
