# create dimreduction1 model
d = layers.Input(shape=(500, 4))
conv1 = layers.Conv1D(32, 5, padding='same', activation=tf.nn.relu)(d)
conv2 = layers.Conv1D(32, 5, padding='same', activation=tf.nn.relu)(conv1)
conv2_1= layers.Conv1D(32, 5, padding='same', activation=tf.nn.relu)(conv2)
conv2_2 = layers.Conv1D(32,5, padding='same', activation= tf.nn.relu)(conv2_1)
maxpooling1d = layers.MaxPooling1D(pool_size=2, strides=2)
concat1 = layers.Concatenate(axis=2)([layers.MaxPooling1D(pool_size=2, strides=2)(conv2_2), layers.MaxPooling1D(pool_size=2, strides=2)(conv2)])
maxpooling1d1 = layers.MaxPooling1D(pool_size=2, strides=2)(concat1)
SpatialMaxPooling1D1 = layers.SpatialDropout1D(0.16)(maxpooling1d1)
conv3 = layers.Conv1D(32, 11, padding='same', activation= tf.nn.relu)(SpatialMaxPooling1D1)
conv4 = layers.Conv1D(32, 11, padding='same', activation=tf.nn.relu)(conv3)
conv4_1 = layers.Conv1D(64, 7, padding='same', activation=tf.nn.relu)(conv4)
conv4_2 = layers.Conv1D(64, 7, padding='same', activation=tf.nn.relu)(conv4_1)
concat2 = layers.Concatenate(axis=2)([layers.MaxPooling1D(pool_size=2, strides=2)(conv4_2), layers.MaxPooling1D(pool_size=2, strides=2)(conv4)])
avgpooling1d = layers.AveragePooling1D(pool_size=2, strides=2)(concat2)
conv5 = layers.Conv1D(256, 7, padding='same', activation=tf.nn.relu)(avgpooling1d)
conv6 = layers.Conv1D(256, 7, padding='same', activation=tf.nn.relu)(conv5)
conv6_1 = layers.Conv1D(256, 5, padding='same', activation=tf.nn.relu)(conv6)
conv6_2 = layers.Conv1D(256, 5, padding='same', activation=tf.nn.relu)(conv6_1)
concat3 = layers.Concatenate(axis=2)([conv6_2, conv6])
SpatialMaxPooling1D2 = layers.SpatialDropout1D(0.16)(concat3)
globalavgpooling1d = layers.GlobalAveragePooling1D()(SpatialMaxPooling1D2)
globalmaxpooling1d = layers.GlobalMaxPooling1D()(SpatialMaxPooling1D2)
print('globalavgpooling1d shape',globalavgpooling1d.shape)
print('globalmaxpooling1d shape',globalmaxpooling1d.shape)
fc = layers.Dense(1)(layers.Add()([globalavgpooling1d, globalmaxpooling1d]))
model = Model(d,fc)

# save model and visualize
path = './dimreduction1.h5'
tf.keras.models.save_model(model,path)
netron.start(path)
