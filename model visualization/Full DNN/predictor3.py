# create predictor3 model
d = layers.Input(shape=(100, 10))
conv1 = layers.Conv1D(256, 5, padding='same', activation=tf.nn.relu)(d)
conv2 = layers.Conv1D(128, 9, padding='same', activation=tf.nn.relu)(conv1)
conv3 = layers.Conv1D(512, 3, padding='same', activation=tf.nn.relu)(conv2)
spatialdropout1d1 = layers.SpatialDropout1D(0.16)(conv3)
maxpooling1d1 = layers.MaxPooling1D(pool_size=2, strides=2)(spatialdropout1d1)
conv4_1 = layers.Conv1D(32, 5, padding='same', activation=tf.nn.relu)(maxpooling1d1)
conv4_2 = layers.Conv1D(32, 9, padding='same', activation=tf.nn.relu)(maxpooling1d1)
# need to know why dot axes=(2, 2)
dotted = layers.dot([conv4_1, conv4_2], axes=(2, 2))
activation = layers.Activation(tf.nn.sigmoid)(dotted)
globalavgpooling1d1_1 = layers.GlobalAveragePooling1D()(conv4_1)
globalavgpooling1d1_2 = layers.GlobalAveragePooling1D()(activation)
concat1 = layers.Concatenate(axis=1)([globalavgpooling1d1_1, globalavgpooling1d1_2]) 
reshape = layers.Reshape((-1, 1))(concat1)
conv5_1 = layers.Conv1D(128, 9, padding='same', activation=tf.nn.relu)(reshape)
conv5_2 = layers.Conv1D(32, 7, padding='same', activation=tf.nn.relu)(reshape)
conv5_3 = layers.Conv1D(256, 13, padding='same', activation=tf.nn.relu)(reshape)
conv6_1 = layers.Conv1D(256, 15, padding='same', activation=tf.nn.relu)(conv5_1)
conv6_2 = layers.Conv1D(128, 5, padding='same', activation=tf.nn.relu)(conv5_2)
conv6_3 = layers.Conv1D(256, 7, padding='same', activation=tf.nn.relu)(conv5_3)
conv7_1 = layers.Conv1D(64, 5 , padding='same', activation=tf.nn.relu)(conv6_1)
conv7_2 = layers.Conv1D(128, 9, padding='same', activation=tf.nn.relu)(conv6_2)
conv7_3 = layers.Conv1D(64, 7, padding='same', activation=tf.nn.relu)(conv6_3)
globalavgpooling1d2_1 = layers.GlobalAveragePooling1D()(conv7_1)
globalmaxpooling1d2_1 = layers.GlobalMaxPooling1D()(conv7_1)
globalavgpooling1d2_2 = layers.GlobalAveragePooling1D()(conv7_2)
globalmaxpooling1d2_2 = layers.GlobalMaxPooling1D()(conv7_2)
globalavgpooling1d2_3 = layers.GlobalAveragePooling1D()(conv7_3)
globalmaxpooling1d2_3 = layers.GlobalMaxPooling1D()(conv7_3)
add1_1 = layers.Add()([globalavgpooling1d2_1, globalmaxpooling1d2_1])
add1_2 = layers.Add()([globalavgpooling1d2_2, globalmaxpooling1d2_2])
add1_3 = layers.Add()([globalavgpooling1d2_3, globalmaxpooling1d2_3])
fc1_1 = layers.Dense(1)(add1_1)
fc1_2 = layers.Dense(1)(add1_2)
fc1_3 = layers.Dense(1)(add1_3)
add2 = layers.Add()([fc1_1, fc1_2, fc1_3])
model = Model(d, add2)

# save model and visualize
path = './predictor3.h5'
tf.keras.models.save_model(model,path)
netron.start(path)
