# create dimreduction1 model
d = layers.Input(shape = (500,4))
conv1 = layers.Conv1D(128, 13, padding='same', activation=tf.nn.relu)(d)
conv2 = layers.Conv1D(128, 13, padding='same', activation=tf.nn.relu)(conv1)
maxpooling1d1_1 = layers.MaxPooling1D(pool_size=2, strides=2)(conv2)
conv3 = layers.Conv1D(384, 5, padding='same', activation=tf.nn.relu)(conv2)
conv4 = layers.Conv1D(384, 5, padding='same', activation=tf.nn.relu)(conv3)
maxpooling1d1_2 = layers.MaxPooling1D(pool_size=2, strides=2)(conv4)
concat1 = layers.Concatenate(axis=2)([maxpooling1d1_1, maxpooling1d1_2])
maxpooling1d2 = layers.MaxPooling1D(pool_size=2, strides=2)(concat1)
spatialdropout1d1 = layers.SpatialDropout1D(0.16)(maxpooling1d2)
conv5 = layers.Conv1D(64, 17, padding='same', activation=tf.nn.relu)(spatialdropout1d1)
conv6 = layers.Conv1D(64, 17, padding='same', activation=tf.nn.relu)(conv5)
avgpooling1d1_1 = layers.AveragePooling1D(pool_size=2, strides=2)(conv6)
conv7 = layers.Conv1D(192, 3, padding='same', activation=tf.nn.relu)(conv6)
conv8 = layers.Conv1D(192, 3, padding='same', activation=tf.nn.relu)(conv7)
avgpooling1d1_2 = layers.AveragePooling1D(pool_size=2, strides=2)(conv8)
concat2 = layers.Concatenate(axis=2)([avgpooling1d1_1, avgpooling1d1_2])
maxpooling1d3 = layers.MaxPooling1D(pool_size=2, strides=2)(concat2)
conv9 = layers.Conv1D(32, 13, padding='same', activation=tf.nn.relu)(maxpooling1d3)
conv10 = layers.Conv1D(32, 13, padding='same', activation=tf.nn.relu)(conv9)
conv11 = layers.Conv1D(32, 3, padding='same', activation=tf.nn.relu)(conv10)
conv12 = layers.Conv1D(32, 3, padding='same', activation=tf.nn.relu)(conv11)
concat3 = layers.Concatenate(axis= 2)([conv10, conv12])
spatialdropout1d2 = layers.SpatialDropout1D(0.16)(concat3)
globalavgpooling1d1 = layers.GlobalAveragePooling1D()(spatialdropout1d2)
globalmaxpooling1d1 = layers.GlobalMaxPooling1D()(spatialdropout1d2)
add = layers.Add()([globalavgpooling1d1, globalmaxpooling1d1])
fc = layers.Dense(1)(add)
model = Model(d, fc)

# save model and visualize
path = './dimension_reduction1.h5'
tf.keras.models.save_model(model,path)
netron.start(path)
